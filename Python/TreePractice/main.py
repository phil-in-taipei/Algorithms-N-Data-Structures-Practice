from node.tree_node import TreeNode
from traverse.traversals import Traversal
from binary_search_tree.binary_search_tree import BinarySearchTree


if __name__ == '__main__':
    '''
    print('----------------------------------------------------------------------')
    print('Implementing tree nodes:')
    a = TreeNode("a")
    b = TreeNode("b")
    c = TreeNode("c")
    d = TreeNode("d")
    e = TreeNode("e")
    f = TreeNode("f")
    g = TreeNode("g")
    print('---------------------------------------------------------------------------')
    print('Creating hierarchical left/right relations')

    a.set_left(b)
    a.set_right(c)
    b.set_left(d)
    b.set_right(e)
    c.set_right(g)
    c.set_left(f)
    print('This is the left node:')
    print(a.left.data)
    print('---------------------------------------------------------------------------')
    print('Initializing Traversal object with a node as the root')
    traversal_obj = Traversal(a)
    results1 = traversal_obj.get_depth_first()
    results_data1 = [result.data for result in results1]
    print('---------------------------------------------------------------------------')
    print(F"This is the output of a depth-first traversal: {results_data1}")
    print('---------------------------------------------------------------------------')
    results2 = traversal_obj.get_breadth_first()
    print(len(results2))
    results_data2 = [result.data for result in results2]
    print('---------------------------------------------------------------------------')
    print(F"This is the output of a breadth-first traversal: {results_data2}")
    print('---------------------------------------------------------------------------')
    max_depth = traversal_obj.get_max_depth()
    print(F"The maximum depth is: {max_depth}")
    print('---------------------------------------------------------------------------')
    '''
    print('---------------------------------------------------------------------------')
    print('Initializing binary search tree, and adding a as first value')
    bst = BinarySearchTree()
    bst.insert('l')
    print('---------------------------------------------------------------------------')
    print("Test printing tree with one node:")
    bst.print_tree()
    print('---------------------------------------------------------------------------')
    print("Now adding more nodes:")
    bst.insert('f')
    bst.insert('y')
    bst.insert('c')
    bst.insert('m')
    bst.insert('o')
    bst.insert('s')
    print('---------------------------------------------------------------------------')
    bst.print_tree()
    print('---------------------------------------------------------------------------')
    print("Attempting to look up node for letter o")
    print('---------------------------------------------------------------------------')
    lookup1 = bst.lookup('o')
    print(lookup1.data)
    print('---------------------------------------------------------------------------')
    lookup2 = bst.lookup('x')
    print(lookup2)
    '''
 result = bst.remove('m')
    print(result)
    bst.print_tree()
    print('---------------------------------------------------------------------------')
    '''
    print('---------------------------------------------------------------------------')

    bst.remove_overloaded(removal_data='y')
    print('Result of removing y')
    print('---------------------------------------------------------------------------')
    bst.print_tree()
    bst.remove_overloaded(removal_data='u')
    print('Result of removing u')
    print('---------------------------------------------------------------------------')
    bst.print_tree()
    print('---------------------------------------------------------------------------')
    print(bst.root.data)
    print(bst.root.left.data)
    print(bst.root.right.data)
    print('---------------------------------------------------------------------------')
    print(bst.get_count())
    print('----------------------------------------------------------------------------')
